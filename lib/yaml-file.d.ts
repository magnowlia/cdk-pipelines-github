import { JsonPatch } from './json-patch';
/**
 * Options for `YamlFile`
 */
export interface YamlFileOptions {
    /**
     * The object that will be serialized. You can modify the object's contents
     * before synthesis.
     *
     * @default {} an empty object
     */
    readonly obj?: any;
}
/**
 * Represents a Yaml File.
 */
export declare class YamlFile {
    /**
     * The path to the file that the object will be written to.
     */
    private readonly filePath;
    /**
     * The output object. This object can be mutated until the project is synthesized.
     */
    private obj;
    /**
     * Patches to be applied to `obj` after the resolver is called.
     */
    private readonly patchOperations;
    /**
     * A comment to be added to the top of the YAML file.
     *
     * Can be multiline. All non-empty line are pefixed with '# '. Empty lines are kept, but not commented.
     *
     * For example:
     * ```ts
     * declare const pipeline: GitHubWorkflow;
     * pipeline.workflowFile.commentAtTop =
     * `AUTOGENERATED FILE, DO NOT EDIT!
     * See ReadMe.md
     * `;
     * ```
     *
     * Results in YAML:
     * ```yaml
     * # AUTOGENERATED FILE, DO NOT EDIT!
     * # See ReadMe.md
     *
     * name: deploy
     * ...
     * ```
     */
    commentAtTop?: string;
    constructor(filePath: string, options?: YamlFileOptions);
    /**
     * Update the output object.
     */
    update(obj: any): void;
    /**
     * Applies an RFC 6902 JSON-patch to the synthesized object file.
     * See https://datatracker.ietf.org/doc/html/rfc6902 for more information.
     *
     * For example, with the following yaml file
     * ```yaml
     * name: deploy
     * on:
     *   push:
     *     branches:
     *       - main
     *   workflow_dispatch: {}
     * ...
     * ```
     *
     * modified in the following way:
     *
     * ```ts
     * declare const pipeline: GitHubWorkflow;
     * pipeline.workflowFile.patch(JsonPatch.add("/on/workflow_call", "{}"));
     * pipeline.workflowFile.patch(JsonPatch.remove("/on/workflow_dispatch"));
     * ```
     *
     * would result in the following yaml file:
     *
     * ```yaml
     * name: deploy
     * on:
     *   push:
     *     branches:
     *       - main
     *   workflow_call: {}
     * ...
     * ```
     *
     * @param patches - The patch operations to apply
     */
    patch(...patches: JsonPatch[]): void;
    /**
     * Returns the patched yaml file.
     */
    toYaml(): string;
    /**
     * Write the patched yaml file to the specified location.
     */
    writeFile(): void;
}
