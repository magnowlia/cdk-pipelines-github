"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runner = exports.JobPermission = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Access level for workflow permission scopes.
 */
var JobPermission;
(function (JobPermission) {
    /** Read-only access */
    JobPermission["READ"] = "read";
    /** Read-write access */
    JobPermission["WRITE"] = "write";
    /** No access at all */
    JobPermission["NONE"] = "none";
})(JobPermission = exports.JobPermission || (exports.JobPermission = {}));
/**
 * The type of runner to run the job on. Can be GitHub or Self-hosted.
 * In case of self-hosted, a list of labels can be supplied.
 */
class Runner {
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * Creates a runner instance that sets runsOn to `self-hosted`.
     * Additional labels can be supplied. There is no need to supply `self-hosted` as a label explicitly.
     */
    static selfHosted(labels) {
        if (labels[0] === 'self-hosted') {
            return new Runner(labels);
        }
        else {
            return new Runner(['self-hosted', ...labels]);
        }
    }
    get runsOn() {
        if (this.labels[0] === 'self-hosted') {
            return this.labels;
        }
        else {
            return this.labels[0];
        }
    }
}
exports.Runner = Runner;
_a = JSII_RTTI_SYMBOL_1;
Runner[_a] = { fqn: "cdk-pipelines-github.Runner", version: "0.0.0" };
/**
 * Runner instance that sets runsOn to `ubuntu-latest`
 */
Runner.UBUNTU_LATEST = new Runner(['ubuntu-latest']);
/**
 * Runner instance that sets runsOn to `windows-latest`
 */
Runner.WINDOWS_LATEST = new Runner(['windows-latest']);
/**
 * Runner instance that sets runsOn to `macos-latest`
 */
Runner.MACOS_LATEST = new Runner(['macos-latest']);
//# sourceMappingURL=data:application/json;base64,